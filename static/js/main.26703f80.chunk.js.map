{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","Fragment","className","alt","src","width","height","CardList","robots","map","robot","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0OA2BeA,G,MAjBJ,SAACC,GAAS,IACZC,EAAiBD,EAAjBC,GAAIC,EAAaF,EAAbE,KAAMC,EAAOH,EAAPG,MAClB,OACC,kBAAC,IAAMC,SAAP,KACC,yBAAKC,UAAU,yDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BN,EAA1B,YAAwCO,MAAM,MAAMC,OAAO,QACjF,6BACA,4BAAKP,GACL,2BAAIC,QCQOO,EAtBA,SAAC,GAAc,IAAZC,EAAW,EAAXA,OAEjB,OACC,6BAEMA,EAAOC,KAAI,SAACC,EAAOC,GACvB,OACG,kBAAC,EAAD,CACFC,IAAKF,EAAMZ,GACXA,GAAIU,EAAOG,GAAOb,GAClBC,KAAMS,EAAOG,GAAOZ,KACpBC,MAAOQ,EAAOG,GAAOX,aCEXa,EAdE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAElB,OACC,yBAAKZ,UAAU,UACZ,2BAAOA,UAAU,sCAChBa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCDI,EARD,SAACrB,GACd,OACC,yBAAKsB,MAAO,CAACC,UAAU,SAAUd,OAAQ,UACvCT,EAAMwB,WCiBKC,E,kDApBd,WAAYzB,GAAO,IAAD,8BACjB,cAAMA,IACD0B,MAAM,CACVC,UAAU,GAHM,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACN,uDAEDG,KAAK9B,MAAMwB,a,GAhBQQ,aCoDbC,E,kDA5Cd,aAAc,IAAD,8BACZ,gBAcDC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAd5C,EAAKZ,MAAM,CACVf,OAAQ,GACRyB,YAAa,IAJF,E,gEAOO,IAAD,OAGlBG,MAAM,8CACJC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACpB,OAAQgC,S,+BAO/B,IAAD,EACmBb,KAAKJ,MAA1Bf,EADE,EACFA,OAAQyB,EADN,EACMA,YACRQ,EAAejC,EAAOkC,QAAQ,SAAAhC,GAC5B,OAAOA,EAAMX,KAAK4C,cAAcC,SAASX,EAAYU,kBAG1D,OAAInC,EAAOqC,OAKZ,yBAAK3C,UAAU,MACZ,2CACA,kBAAC,EAAD,CAAWY,aAAca,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUvB,OAAQiC,OATjB,wBAAIvC,UAAU,MAAd,kB,GA3BK4C,IAAMjB,W,MCGJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.26703f80.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// class Card extends Component{\r\n// \trender(){\r\n// \t\treturn(\r\n// \t\t\t<h1>Hello</h1>\r\n// \t\t);\r\n// \t}\r\n// }\r\n\r\nconst Card=(props)=>{\r\n\tconst { id, name, email}=props; //de\r\n\treturn(\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"tc bg-lightest-blue dib br2 pa1 ma2 grow bw2 shadow-5\">\r\n\t\t\t  <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} width=\"200\" height=\"200\"/>\r\n\t\t\t\t<div>\r\n\t\t\t\t<h3>{name}</h3>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList=({ robots })=>{\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t   {\r\n\t\t      robots.map((robot, index)=>{\r\n\t\t\t\treturn (\r\n\t\t\t\t   <Card \r\n\t\t\t\t\tkey={robot.id} \r\n\t\t\t\t\tid={robots[index].id} \r\n\t\t\t\t\tname={robots[index].name} \r\n\t\t\t\t\temail={robots[index].email}\r\n\t\t\t\t\t/>\r\n\t\t\t    );\r\n\t\t\t     //return <Card key={index} id={robot.id} name={robot.name} email={robot.email}/> //Does the same thing\r\n\t\t\t  })\r\n\t\t   }\r\n       </div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox= ({searchChange}) => {\r\n\t\r\n\treturn (\r\n\t\t<div className=\"tc pa2\">\r\n\t\t   <input className=\"w-30 pa3 tc b--green bg-light-green\"\r\n\t\t    type=\"search\" \r\n\t\t    placeholder=\"Search Robots\"\r\n\t\t    onChange={searchChange}\r\n\t\t    />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//Scroll needs to render its children\r\nconst Scroll =(props) =>{\r\n return (\r\n \t<div style={{overflowY:'scroll', height: '450px'}}>\r\n \t\t{props.children}\r\n \t</div>\r\n );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops.That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport './App.css';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: \"\"\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\t//fetch makes a http request\r\n\t\t//ftech returns a response and we convert it to json\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then( response => response.json())\r\n\t\t\t.then( users => this.setState({robots: users}));\t\t\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n    \tthis.setState({searchField: event.target.value});\r\n\t}\r\n\r\n\trender() {\t\r\n\t\tconst{robots, searchField}=this.state;\r\n\t\tconst filteredRobots=robots.filter( robot =>{\r\n         \treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    \t});\r\n    \t//making if statement ternary\r\n    \tif(!robots.length){ //instead of robots.length === 0\r\n    \t\treturn <h1 className=\"tc\">Loading...</h1>\r\n    \t}\r\n        else{\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t   <h1>RoboFriends</h1>\r\n\t\t\t\t   <SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t   <Scroll>\r\n\t\t\t\t   \t   <ErrorBoundary>\r\n\t\t\t\t   \t    <CardList robots={filteredRobots}/>\r\n\t\t\t\t   \t   </ErrorBoundary>\r\n\t\t\t\t   </Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}